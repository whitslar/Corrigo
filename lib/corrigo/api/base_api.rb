=begin
#Corrigo Api Integration

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Corrigo
  class BaseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create record for entity type with filled coresponding entity
    # @param entity_name [String] Entity type of creating record
    # @param api_version [String] 
    # @param authorization [String] Bearer token
    # @param company_name [String] Company friendly name
    # @param body [ChangeRequest] Change request model with coresponding Corrigo Entity data
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def base_create(entity_name, api_version, authorization, company_name, body, opts = {})
      data, _status_code, _headers = base_create_with_http_info(entity_name, api_version, authorization, company_name, body, opts)
      data
    end

    # Create record for entity type with filled coresponding entity
    # @param entity_name [String] Entity type of creating record
    # @param api_version [String] 
    # @param authorization [String] Bearer token
    # @param company_name [String] Company friendly name
    # @param body [ChangeRequest] Change request model with coresponding Corrigo Entity data
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def base_create_with_http_info(entity_name, api_version, authorization, company_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaseApi.base_create ...'
      end
      # verify the required parameter 'entity_name' is set
      if @api_client.config.client_side_validation && entity_name.nil?
        fail ArgumentError, "Missing the required parameter 'entity_name' when calling BaseApi.base_create"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling BaseApi.base_create"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling BaseApi.base_create"
      end
      # verify the required parameter 'company_name' is set
      if @api_client.config.client_side_validation && company_name.nil?
        fail ArgumentError, "Missing the required parameter 'company_name' when calling BaseApi.base_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BaseApi.base_create"
      end
      # resource path
      local_var_path = '/v{apiVersion}/base/{entityName}'.sub('{' + 'entityName' + '}', CGI.escape(entity_name.to_s)).sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization
      header_params[:'CompanyName'] = company_name

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BaseApi.base_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaseApi#base_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete record of entity type and Id
    # @param entity_name [String] Entity type of record for deleting
    # @param inline_id [Integer] Id of simple entity
    # @param api_version [String] 
    # @param authorization [String] Bearer token
    # @param company_name [String] Company friendly name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Id or JSON object with identifier fields of retrieve data
    # @option opts [String] :request_id The unique identifier of the request
    # @return [Object]
    def base_delete(entity_name, inline_id, api_version, authorization, company_name, opts = {})
      data, _status_code, _headers = base_delete_with_http_info(entity_name, inline_id, api_version, authorization, company_name, opts)
      data
    end

    # Delete record of entity type and Id
    # @param entity_name [String] Entity type of record for deleting
    # @param inline_id [Integer] Id of simple entity
    # @param api_version [String] 
    # @param authorization [String] Bearer token
    # @param company_name [String] Company friendly name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Id or JSON object with identifier fields of retrieve data
    # @option opts [String] :request_id The unique identifier of the request
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def base_delete_with_http_info(entity_name, inline_id, api_version, authorization, company_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaseApi.base_delete ...'
      end
      # verify the required parameter 'entity_name' is set
      if @api_client.config.client_side_validation && entity_name.nil?
        fail ArgumentError, "Missing the required parameter 'entity_name' when calling BaseApi.base_delete"
      end
      # verify the required parameter 'inline_id' is set
      if @api_client.config.client_side_validation && inline_id.nil?
        fail ArgumentError, "Missing the required parameter 'inline_id' when calling BaseApi.base_delete"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling BaseApi.base_delete"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling BaseApi.base_delete"
      end
      # verify the required parameter 'company_name' is set
      if @api_client.config.client_side_validation && company_name.nil?
        fail ArgumentError, "Missing the required parameter 'company_name' when calling BaseApi.base_delete"
      end
      # resource path
      local_var_path = '/v{apiVersion}/base/{entityName}/{inlineId}'.sub('{' + 'entityName' + '}', CGI.escape(entity_name.to_s)).sub('{' + 'inlineId' + '}', CGI.escape(inline_id.to_s)).sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'requestId'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'CompanyName'] = company_name

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BaseApi.base_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaseApi#base_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get record by entity type and identifier
    # @param entity_name [String] Entity type of retrieve data
    # @param inline_id [Integer] Id of simple entity
    # @param api_version [String] 
    # @param authorization [String] Bearer token
    # @param company_name [String] Company friendly name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Id or JSON object with identifier fields of retrieve data
    # @option opts [String] :properties List of property names to query combined by \&quot;,\&quot;
    # @option opts [String] :request_id The unique identifier of the request
    # @return [Object]
    def base_get(entity_name, inline_id, api_version, authorization, company_name, opts = {})
      data, _status_code, _headers = base_get_with_http_info(entity_name, inline_id, api_version, authorization, company_name, opts)
      data
    end

    # Get record by entity type and identifier
    # @param entity_name [String] Entity type of retrieve data
    # @param inline_id [Integer] Id of simple entity
    # @param api_version [String] 
    # @param authorization [String] Bearer token
    # @param company_name [String] Company friendly name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Id or JSON object with identifier fields of retrieve data
    # @option opts [String] :properties List of property names to query combined by \&quot;,\&quot;
    # @option opts [String] :request_id The unique identifier of the request
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def base_get_with_http_info(entity_name, inline_id, api_version, authorization, company_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaseApi.base_get ...'
      end
      # verify the required parameter 'entity_name' is set
      if @api_client.config.client_side_validation && entity_name.nil?
        fail ArgumentError, "Missing the required parameter 'entity_name' when calling BaseApi.base_get"
      end
      # verify the required parameter 'inline_id' is set
      if @api_client.config.client_side_validation && inline_id.nil?
        fail ArgumentError, "Missing the required parameter 'inline_id' when calling BaseApi.base_get"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling BaseApi.base_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling BaseApi.base_get"
      end
      # verify the required parameter 'company_name' is set
      if @api_client.config.client_side_validation && company_name.nil?
        fail ArgumentError, "Missing the required parameter 'company_name' when calling BaseApi.base_get"
      end
      # resource path
      local_var_path = '/v{apiVersion}/base/{entityName}/{inlineId}'.sub('{' + 'entityName' + '}', CGI.escape(entity_name.to_s)).sub('{' + 'inlineId' + '}', CGI.escape(inline_id.to_s)).sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'properties'] = opts[:'properties'] if !opts[:'properties'].nil?
      query_params[:'requestId'] = opts[:'request_id'] if !opts[:'request_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'CompanyName'] = company_name

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BaseApi.base_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaseApi#base_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update record for entity type by filled coresponding properties
    # @param entity_name [String] Entity type of updated record
    # @param api_version [String] 
    # @param authorization [String] Bearer token
    # @param company_name [String] Company friendly name
    # @param body [ChangeRequest] Change request model with property set and entity fields
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def base_update(entity_name, api_version, authorization, company_name, body, opts = {})
      data, _status_code, _headers = base_update_with_http_info(entity_name, api_version, authorization, company_name, body, opts)
      data
    end

    # Update record for entity type by filled coresponding properties
    # @param entity_name [String] Entity type of updated record
    # @param api_version [String] 
    # @param authorization [String] Bearer token
    # @param company_name [String] Company friendly name
    # @param body [ChangeRequest] Change request model with property set and entity fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def base_update_with_http_info(entity_name, api_version, authorization, company_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BaseApi.base_update ...'
      end
      # verify the required parameter 'entity_name' is set
      if @api_client.config.client_side_validation && entity_name.nil?
        fail ArgumentError, "Missing the required parameter 'entity_name' when calling BaseApi.base_update"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling BaseApi.base_update"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling BaseApi.base_update"
      end
      # verify the required parameter 'company_name' is set
      if @api_client.config.client_side_validation && company_name.nil?
        fail ArgumentError, "Missing the required parameter 'company_name' when calling BaseApi.base_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BaseApi.base_update"
      end
      # resource path
      local_var_path = '/v{apiVersion}/base/{entityName}'.sub('{' + 'entityName' + '}', CGI.escape(entity_name.to_s)).sub('{' + 'apiVersion' + '}', CGI.escape(api_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization
      header_params[:'CompanyName'] = company_name

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BaseApi.base_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaseApi#base_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
