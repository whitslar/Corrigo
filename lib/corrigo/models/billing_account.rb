=begin
#Corrigo Api Integration

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Corrigo
  class BillingAccount
    attr_accessor :id

    attr_accessor :perform_deletion

    attr_accessor :concurrency_id

    attr_accessor :is_removed

    attr_accessor :display_as

    attr_accessor :cp_theme_id

    attr_accessor :is_bill_acct

    attr_accessor :number

    attr_accessor :payment_terms

    attr_accessor :payment_number_of_days

    attr_accessor :payment_instrustions

    attr_accessor :is_credit_hold

    attr_accessor :accrual_margin

    attr_accessor :sales_rep

    attr_accessor :is_tax_exempt

    attr_accessor :corp_entity

    attr_accessor :balance

    attr_accessor :pay_day_type

    attr_accessor :pay_day_number

    attr_accessor :is_self_select

    attr_accessor :currency_type_id

    attr_accessor :users

    attr_accessor :customers

    attr_accessor :contacts

    attr_accessor :custom_fields

    attr_accessor :address

    attr_accessor :notes

    attr_accessor :synchronize_nte

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'perform_deletion' => :'PerformDeletion',
        :'concurrency_id' => :'ConcurrencyId',
        :'is_removed' => :'IsRemoved',
        :'display_as' => :'DisplayAs',
        :'cp_theme_id' => :'CpThemeId',
        :'is_bill_acct' => :'IsBillAcct',
        :'number' => :'Number',
        :'payment_terms' => :'PaymentTerms',
        :'payment_number_of_days' => :'PaymentNumberOfDays',
        :'payment_instrustions' => :'PaymentInstrustions',
        :'is_credit_hold' => :'IsCreditHold',
        :'accrual_margin' => :'AccrualMargin',
        :'sales_rep' => :'SalesRep',
        :'is_tax_exempt' => :'IsTaxExempt',
        :'corp_entity' => :'CorpEntity',
        :'balance' => :'Balance',
        :'pay_day_type' => :'PayDayType',
        :'pay_day_number' => :'PayDayNumber',
        :'is_self_select' => :'IsSelfSelect',
        :'currency_type_id' => :'CurrencyTypeId',
        :'users' => :'Users',
        :'customers' => :'Customers',
        :'contacts' => :'Contacts',
        :'custom_fields' => :'CustomFields',
        :'address' => :'Address',
        :'notes' => :'Notes',
        :'synchronize_nte' => :'SynchronizeNte'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'perform_deletion' => :'Boolean',
        :'concurrency_id' => :'Integer',
        :'is_removed' => :'Boolean',
        :'display_as' => :'String',
        :'cp_theme_id' => :'Integer',
        :'is_bill_acct' => :'Boolean',
        :'number' => :'String',
        :'payment_terms' => :'String',
        :'payment_number_of_days' => :'Integer',
        :'payment_instrustions' => :'String',
        :'is_credit_hold' => :'Boolean',
        :'accrual_margin' => :'Integer',
        :'sales_rep' => :'String',
        :'is_tax_exempt' => :'Boolean',
        :'corp_entity' => :'CorporateEntity',
        :'balance' => :'Float',
        :'pay_day_type' => :'Integer',
        :'pay_day_number' => :'Integer',
        :'is_self_select' => :'Boolean',
        :'currency_type_id' => :'CurrencyType',
        :'users' => :'Array<LinkUserAndCustomerGroup>',
        :'customers' => :'Array<LinkCustomerAndGroup>',
        :'contacts' => :'Array<LinkContactAndGroup>',
        :'custom_fields' => :'Array<CustomField2>',
        :'address' => :'Address2',
        :'notes' => :'Array<Note>',
        :'synchronize_nte' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'BillingAccountAllOf',
      :'RemovableCorrigoEntity'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Corrigo::BillingAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Corrigo::BillingAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'perform_deletion')
        self.perform_deletion = attributes[:'perform_deletion']
      end

      if attributes.key?(:'concurrency_id')
        self.concurrency_id = attributes[:'concurrency_id']
      end

      if attributes.key?(:'is_removed')
        self.is_removed = attributes[:'is_removed']
      end

      if attributes.key?(:'display_as')
        self.display_as = attributes[:'display_as']
      end

      if attributes.key?(:'cp_theme_id')
        self.cp_theme_id = attributes[:'cp_theme_id']
      end

      if attributes.key?(:'is_bill_acct')
        self.is_bill_acct = attributes[:'is_bill_acct']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'payment_terms')
        self.payment_terms = attributes[:'payment_terms']
      end

      if attributes.key?(:'payment_number_of_days')
        self.payment_number_of_days = attributes[:'payment_number_of_days']
      end

      if attributes.key?(:'payment_instrustions')
        self.payment_instrustions = attributes[:'payment_instrustions']
      end

      if attributes.key?(:'is_credit_hold')
        self.is_credit_hold = attributes[:'is_credit_hold']
      end

      if attributes.key?(:'accrual_margin')
        self.accrual_margin = attributes[:'accrual_margin']
      end

      if attributes.key?(:'sales_rep')
        self.sales_rep = attributes[:'sales_rep']
      end

      if attributes.key?(:'is_tax_exempt')
        self.is_tax_exempt = attributes[:'is_tax_exempt']
      end

      if attributes.key?(:'corp_entity')
        self.corp_entity = attributes[:'corp_entity']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'pay_day_type')
        self.pay_day_type = attributes[:'pay_day_type']
      end

      if attributes.key?(:'pay_day_number')
        self.pay_day_number = attributes[:'pay_day_number']
      end

      if attributes.key?(:'is_self_select')
        self.is_self_select = attributes[:'is_self_select']
      end

      if attributes.key?(:'currency_type_id')
        self.currency_type_id = attributes[:'currency_type_id']
      end

      if attributes.key?(:'users')
        if (value = attributes[:'users']).is_a?(Array)
          self.users = value
        end
      end

      if attributes.key?(:'customers')
        if (value = attributes[:'customers']).is_a?(Array)
          self.customers = value
        end
      end

      if attributes.key?(:'contacts')
        if (value = attributes[:'contacts']).is_a?(Array)
          self.contacts = value
        end
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'notes')
        if (value = attributes[:'notes']).is_a?(Array)
          self.notes = value
        end
      end

      if attributes.key?(:'synchronize_nte')
        self.synchronize_nte = attributes[:'synchronize_nte']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          perform_deletion == o.perform_deletion &&
          concurrency_id == o.concurrency_id &&
          is_removed == o.is_removed &&
          display_as == o.display_as &&
          cp_theme_id == o.cp_theme_id &&
          is_bill_acct == o.is_bill_acct &&
          number == o.number &&
          payment_terms == o.payment_terms &&
          payment_number_of_days == o.payment_number_of_days &&
          payment_instrustions == o.payment_instrustions &&
          is_credit_hold == o.is_credit_hold &&
          accrual_margin == o.accrual_margin &&
          sales_rep == o.sales_rep &&
          is_tax_exempt == o.is_tax_exempt &&
          corp_entity == o.corp_entity &&
          balance == o.balance &&
          pay_day_type == o.pay_day_type &&
          pay_day_number == o.pay_day_number &&
          is_self_select == o.is_self_select &&
          currency_type_id == o.currency_type_id &&
          users == o.users &&
          customers == o.customers &&
          contacts == o.contacts &&
          custom_fields == o.custom_fields &&
          address == o.address &&
          notes == o.notes &&
          synchronize_nte == o.synchronize_nte
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, perform_deletion, concurrency_id, is_removed, display_as, cp_theme_id, is_bill_acct, number, payment_terms, payment_number_of_days, payment_instrustions, is_credit_hold, accrual_margin, sales_rep, is_tax_exempt, corp_entity, balance, pay_day_type, pay_day_number, is_self_select, currency_type_id, users, customers, contacts, custom_fields, address, notes, synchronize_nte].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Corrigo.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
