=begin
#Corrigo Api Integration

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Corrigo
  class EmployeeAllOf
    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :display_as

    attr_accessor :role

    attr_accessor :access_to_all_work_zones

    attr_accessor :language_id

    attr_accessor :actor_type_id

    attr_accessor :username

    attr_accessor :dt_pwd_change

    attr_accessor :provider_invited_on

    attr_accessor :instructions

    attr_accessor :won_member_id

    attr_accessor :won_location_id

    attr_accessor :won_service_radius

    attr_accessor :is_electronic_payment

    attr_accessor :provider_status_id

    attr_accessor :label_id

    attr_accessor :free_text_allowed

    attr_accessor :radius_unit

    attr_accessor :password

    attr_accessor :number

    attr_accessor :job_title

    attr_accessor :federal_id

    attr_accessor :external_id

    attr_accessor :force_password_reset

    attr_accessor :tax_warn_only

    attr_accessor :default_price_list

    attr_accessor :price_lists

    attr_accessor :custom_fields

    attr_accessor :organization

    attr_accessor :bill_at_zero

    attr_accessor :is_supplier

    attr_accessor :provider_type_id

    attr_accessor :contact_addresses

    attr_accessor :address

    attr_accessor :teams

    attr_accessor :work_zones

    attr_accessor :portfolios

    attr_accessor :customer_groups

    attr_accessor :specialties

    attr_accessor :pay_rates

    attr_accessor :stock_locations

    attr_accessor :services

    attr_accessor :alert_subscriptions

    attr_accessor :tax_exempt

    attr_accessor :limit_assignment_by_portfolio_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'first_name' => :'FirstName',
        :'last_name' => :'LastName',
        :'display_as' => :'DisplayAs',
        :'role' => :'Role',
        :'access_to_all_work_zones' => :'AccessToAllWorkZones',
        :'language_id' => :'LanguageId',
        :'actor_type_id' => :'ActorTypeId',
        :'username' => :'Username',
        :'dt_pwd_change' => :'DtPwdChange',
        :'provider_invited_on' => :'ProviderInvitedOn',
        :'instructions' => :'Instructions',
        :'won_member_id' => :'WonMemberId',
        :'won_location_id' => :'WonLocationId',
        :'won_service_radius' => :'WonServiceRadius',
        :'is_electronic_payment' => :'IsElectronicPayment',
        :'provider_status_id' => :'ProviderStatusId',
        :'label_id' => :'LabelId',
        :'free_text_allowed' => :'FreeTextAllowed',
        :'radius_unit' => :'RadiusUnit',
        :'password' => :'Password',
        :'number' => :'Number',
        :'job_title' => :'JobTitle',
        :'federal_id' => :'FederalId',
        :'external_id' => :'ExternalId',
        :'force_password_reset' => :'ForcePasswordReset',
        :'tax_warn_only' => :'TaxWarnOnly',
        :'default_price_list' => :'DefaultPriceList',
        :'price_lists' => :'PriceLists',
        :'custom_fields' => :'CustomFields',
        :'organization' => :'Organization',
        :'bill_at_zero' => :'BillAtZero',
        :'is_supplier' => :'IsSupplier',
        :'provider_type_id' => :'ProviderTypeId',
        :'contact_addresses' => :'ContactAddresses',
        :'address' => :'Address',
        :'teams' => :'Teams',
        :'work_zones' => :'WorkZones',
        :'portfolios' => :'Portfolios',
        :'customer_groups' => :'CustomerGroups',
        :'specialties' => :'Specialties',
        :'pay_rates' => :'PayRates',
        :'stock_locations' => :'StockLocations',
        :'services' => :'Services',
        :'alert_subscriptions' => :'AlertSubscriptions',
        :'tax_exempt' => :'TaxExempt',
        :'limit_assignment_by_portfolio_id' => :'LimitAssignmentByPortfolioId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'display_as' => :'String',
        :'role' => :'Role',
        :'access_to_all_work_zones' => :'Boolean',
        :'language_id' => :'Integer',
        :'actor_type_id' => :'ActorType',
        :'username' => :'String',
        :'dt_pwd_change' => :'Time',
        :'provider_invited_on' => :'Time',
        :'instructions' => :'String',
        :'won_member_id' => :'Integer',
        :'won_location_id' => :'Integer',
        :'won_service_radius' => :'Integer',
        :'is_electronic_payment' => :'Boolean',
        :'provider_status_id' => :'EmployeeWonStatus',
        :'label_id' => :'Integer',
        :'free_text_allowed' => :'Boolean',
        :'radius_unit' => :'DistanceUnit',
        :'password' => :'String',
        :'number' => :'String',
        :'job_title' => :'String',
        :'federal_id' => :'String',
        :'external_id' => :'String',
        :'force_password_reset' => :'Boolean',
        :'tax_warn_only' => :'Boolean',
        :'default_price_list' => :'PriceList',
        :'price_lists' => :'Array<LinkProviderPriceList>',
        :'custom_fields' => :'Array<CustomField2>',
        :'organization' => :'Organization',
        :'bill_at_zero' => :'Boolean',
        :'is_supplier' => :'Boolean',
        :'provider_type_id' => :'ProviderlType',
        :'contact_addresses' => :'Array<ContactInfo>',
        :'address' => :'Address2',
        :'teams' => :'Array<LinkUserAndTeam>',
        :'work_zones' => :'Array<LinkUserAndWorkZone>',
        :'portfolios' => :'Array<LinkUserAndPortfolio>',
        :'customer_groups' => :'Array<LinkUserAndCustomerGroup>',
        :'specialties' => :'Array<LinkUserAndSpecialty>',
        :'pay_rates' => :'Array<UserPayRate>',
        :'stock_locations' => :'Array<LinkUserAndStockLocation>',
        :'services' => :'Array<LinkProviderAndService>',
        :'alert_subscriptions' => :'Array<AlertSubscription>',
        :'tax_exempt' => :'Boolean',
        :'limit_assignment_by_portfolio_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Corrigo::EmployeeAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Corrigo::EmployeeAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'display_as')
        self.display_as = attributes[:'display_as']
      end

      if attributes.key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.key?(:'access_to_all_work_zones')
        self.access_to_all_work_zones = attributes[:'access_to_all_work_zones']
      end

      if attributes.key?(:'language_id')
        self.language_id = attributes[:'language_id']
      end

      if attributes.key?(:'actor_type_id')
        self.actor_type_id = attributes[:'actor_type_id']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'dt_pwd_change')
        self.dt_pwd_change = attributes[:'dt_pwd_change']
      end

      if attributes.key?(:'provider_invited_on')
        self.provider_invited_on = attributes[:'provider_invited_on']
      end

      if attributes.key?(:'instructions')
        self.instructions = attributes[:'instructions']
      end

      if attributes.key?(:'won_member_id')
        self.won_member_id = attributes[:'won_member_id']
      end

      if attributes.key?(:'won_location_id')
        self.won_location_id = attributes[:'won_location_id']
      end

      if attributes.key?(:'won_service_radius')
        self.won_service_radius = attributes[:'won_service_radius']
      end

      if attributes.key?(:'is_electronic_payment')
        self.is_electronic_payment = attributes[:'is_electronic_payment']
      end

      if attributes.key?(:'provider_status_id')
        self.provider_status_id = attributes[:'provider_status_id']
      end

      if attributes.key?(:'label_id')
        self.label_id = attributes[:'label_id']
      end

      if attributes.key?(:'free_text_allowed')
        self.free_text_allowed = attributes[:'free_text_allowed']
      end

      if attributes.key?(:'radius_unit')
        self.radius_unit = attributes[:'radius_unit']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'job_title')
        self.job_title = attributes[:'job_title']
      end

      if attributes.key?(:'federal_id')
        self.federal_id = attributes[:'federal_id']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'force_password_reset')
        self.force_password_reset = attributes[:'force_password_reset']
      end

      if attributes.key?(:'tax_warn_only')
        self.tax_warn_only = attributes[:'tax_warn_only']
      end

      if attributes.key?(:'default_price_list')
        self.default_price_list = attributes[:'default_price_list']
      end

      if attributes.key?(:'price_lists')
        if (value = attributes[:'price_lists']).is_a?(Array)
          self.price_lists = value
        end
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'bill_at_zero')
        self.bill_at_zero = attributes[:'bill_at_zero']
      end

      if attributes.key?(:'is_supplier')
        self.is_supplier = attributes[:'is_supplier']
      end

      if attributes.key?(:'provider_type_id')
        self.provider_type_id = attributes[:'provider_type_id']
      end

      if attributes.key?(:'contact_addresses')
        if (value = attributes[:'contact_addresses']).is_a?(Array)
          self.contact_addresses = value
        end
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'teams')
        if (value = attributes[:'teams']).is_a?(Array)
          self.teams = value
        end
      end

      if attributes.key?(:'work_zones')
        if (value = attributes[:'work_zones']).is_a?(Array)
          self.work_zones = value
        end
      end

      if attributes.key?(:'portfolios')
        if (value = attributes[:'portfolios']).is_a?(Array)
          self.portfolios = value
        end
      end

      if attributes.key?(:'customer_groups')
        if (value = attributes[:'customer_groups']).is_a?(Array)
          self.customer_groups = value
        end
      end

      if attributes.key?(:'specialties')
        if (value = attributes[:'specialties']).is_a?(Array)
          self.specialties = value
        end
      end

      if attributes.key?(:'pay_rates')
        if (value = attributes[:'pay_rates']).is_a?(Array)
          self.pay_rates = value
        end
      end

      if attributes.key?(:'stock_locations')
        if (value = attributes[:'stock_locations']).is_a?(Array)
          self.stock_locations = value
        end
      end

      if attributes.key?(:'services')
        if (value = attributes[:'services']).is_a?(Array)
          self.services = value
        end
      end

      if attributes.key?(:'alert_subscriptions')
        if (value = attributes[:'alert_subscriptions']).is_a?(Array)
          self.alert_subscriptions = value
        end
      end

      if attributes.key?(:'tax_exempt')
        self.tax_exempt = attributes[:'tax_exempt']
      end

      if attributes.key?(:'limit_assignment_by_portfolio_id')
        self.limit_assignment_by_portfolio_id = attributes[:'limit_assignment_by_portfolio_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          display_as == o.display_as &&
          role == o.role &&
          access_to_all_work_zones == o.access_to_all_work_zones &&
          language_id == o.language_id &&
          actor_type_id == o.actor_type_id &&
          username == o.username &&
          dt_pwd_change == o.dt_pwd_change &&
          provider_invited_on == o.provider_invited_on &&
          instructions == o.instructions &&
          won_member_id == o.won_member_id &&
          won_location_id == o.won_location_id &&
          won_service_radius == o.won_service_radius &&
          is_electronic_payment == o.is_electronic_payment &&
          provider_status_id == o.provider_status_id &&
          label_id == o.label_id &&
          free_text_allowed == o.free_text_allowed &&
          radius_unit == o.radius_unit &&
          password == o.password &&
          number == o.number &&
          job_title == o.job_title &&
          federal_id == o.federal_id &&
          external_id == o.external_id &&
          force_password_reset == o.force_password_reset &&
          tax_warn_only == o.tax_warn_only &&
          default_price_list == o.default_price_list &&
          price_lists == o.price_lists &&
          custom_fields == o.custom_fields &&
          organization == o.organization &&
          bill_at_zero == o.bill_at_zero &&
          is_supplier == o.is_supplier &&
          provider_type_id == o.provider_type_id &&
          contact_addresses == o.contact_addresses &&
          address == o.address &&
          teams == o.teams &&
          work_zones == o.work_zones &&
          portfolios == o.portfolios &&
          customer_groups == o.customer_groups &&
          specialties == o.specialties &&
          pay_rates == o.pay_rates &&
          stock_locations == o.stock_locations &&
          services == o.services &&
          alert_subscriptions == o.alert_subscriptions &&
          tax_exempt == o.tax_exempt &&
          limit_assignment_by_portfolio_id == o.limit_assignment_by_portfolio_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [first_name, last_name, display_as, role, access_to_all_work_zones, language_id, actor_type_id, username, dt_pwd_change, provider_invited_on, instructions, won_member_id, won_location_id, won_service_radius, is_electronic_payment, provider_status_id, label_id, free_text_allowed, radius_unit, password, number, job_title, federal_id, external_id, force_password_reset, tax_warn_only, default_price_list, price_lists, custom_fields, organization, bill_at_zero, is_supplier, provider_type_id, contact_addresses, address, teams, work_zones, portfolios, customer_groups, specialties, pay_rates, stock_locations, services, alert_subscriptions, tax_exempt, limit_assignment_by_portfolio_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Corrigo.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
