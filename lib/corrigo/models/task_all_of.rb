=begin
#Corrigo Api Integration

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Corrigo
  class TaskAllOf
    attr_accessor :model_id

    attr_accessor :display_as

    attr_accessor :preventive

    attr_accessor :routine

    attr_accessor :corrective

    attr_accessor :default

    attr_accessor :symptom

    attr_accessor :completion_time

    attr_accessor :specialty

    attr_accessor :procedure_template

    attr_accessor :priority

    attr_accessor :self_help_type

    attr_accessor :instructions

    attr_accessor :self_help_content

    attr_accessor :people_required

    attr_accessor :skill_level

    attr_accessor :gl_account

    attr_accessor :number

    attr_accessor :currencies

    attr_accessor :charge_code

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'model_id' => :'ModelId',
        :'display_as' => :'DisplayAs',
        :'preventive' => :'Preventive',
        :'routine' => :'Routine',
        :'corrective' => :'Corrective',
        :'default' => :'Default',
        :'symptom' => :'Symptom',
        :'completion_time' => :'CompletionTime',
        :'specialty' => :'Specialty',
        :'procedure_template' => :'ProcedureTemplate',
        :'priority' => :'Priority',
        :'self_help_type' => :'SelfHelpType',
        :'instructions' => :'Instructions',
        :'self_help_content' => :'SelfHelpContent',
        :'people_required' => :'PeopleRequired',
        :'skill_level' => :'SkillLevel',
        :'gl_account' => :'GlAccount',
        :'number' => :'Number',
        :'currencies' => :'Currencies',
        :'charge_code' => :'ChargeCode'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'model_id' => :'Integer',
        :'display_as' => :'String',
        :'preventive' => :'Boolean',
        :'routine' => :'Boolean',
        :'corrective' => :'Boolean',
        :'default' => :'Boolean',
        :'symptom' => :'Boolean',
        :'completion_time' => :'Integer',
        :'specialty' => :'Specialty',
        :'procedure_template' => :'ProcedureTemplate',
        :'priority' => :'WoPriority',
        :'self_help_type' => :'TaskSelfHelpType',
        :'instructions' => :'String',
        :'self_help_content' => :'String',
        :'people_required' => :'Integer',
        :'skill_level' => :'Integer',
        :'gl_account' => :'String',
        :'number' => :'String',
        :'currencies' => :'Array<TaskMoneyValues>',
        :'charge_code' => :'ChargeCodeLookup'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Corrigo::TaskAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Corrigo::TaskAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'model_id')
        self.model_id = attributes[:'model_id']
      end

      if attributes.key?(:'display_as')
        self.display_as = attributes[:'display_as']
      end

      if attributes.key?(:'preventive')
        self.preventive = attributes[:'preventive']
      end

      if attributes.key?(:'routine')
        self.routine = attributes[:'routine']
      end

      if attributes.key?(:'corrective')
        self.corrective = attributes[:'corrective']
      end

      if attributes.key?(:'default')
        self.default = attributes[:'default']
      end

      if attributes.key?(:'symptom')
        self.symptom = attributes[:'symptom']
      end

      if attributes.key?(:'completion_time')
        self.completion_time = attributes[:'completion_time']
      end

      if attributes.key?(:'specialty')
        self.specialty = attributes[:'specialty']
      end

      if attributes.key?(:'procedure_template')
        self.procedure_template = attributes[:'procedure_template']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'self_help_type')
        self.self_help_type = attributes[:'self_help_type']
      end

      if attributes.key?(:'instructions')
        self.instructions = attributes[:'instructions']
      end

      if attributes.key?(:'self_help_content')
        self.self_help_content = attributes[:'self_help_content']
      end

      if attributes.key?(:'people_required')
        self.people_required = attributes[:'people_required']
      end

      if attributes.key?(:'skill_level')
        self.skill_level = attributes[:'skill_level']
      end

      if attributes.key?(:'gl_account')
        self.gl_account = attributes[:'gl_account']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'currencies')
        if (value = attributes[:'currencies']).is_a?(Array)
          self.currencies = value
        end
      end

      if attributes.key?(:'charge_code')
        self.charge_code = attributes[:'charge_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          model_id == o.model_id &&
          display_as == o.display_as &&
          preventive == o.preventive &&
          routine == o.routine &&
          corrective == o.corrective &&
          default == o.default &&
          symptom == o.symptom &&
          completion_time == o.completion_time &&
          specialty == o.specialty &&
          procedure_template == o.procedure_template &&
          priority == o.priority &&
          self_help_type == o.self_help_type &&
          instructions == o.instructions &&
          self_help_content == o.self_help_content &&
          people_required == o.people_required &&
          skill_level == o.skill_level &&
          gl_account == o.gl_account &&
          number == o.number &&
          currencies == o.currencies &&
          charge_code == o.charge_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [model_id, display_as, preventive, routine, corrective, default, symptom, completion_time, specialty, procedure_template, priority, self_help_type, instructions, self_help_content, people_required, skill_level, gl_account, number, currencies, charge_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Corrigo.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
