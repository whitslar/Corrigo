=begin
#Corrigo Api Integration

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Corrigo
  class WarrantyAllOf
    attr_accessor :display_as

    attr_accessor :additional_info

    attr_accessor :is_template

    attr_accessor :organization

    attr_accessor :status_id

    attr_accessor :primary_contact

    attr_accessor :template_id

    attr_accessor :work_order

    attr_accessor :start_date

    attr_accessor :end_date

    attr_accessor :auto_coverage

    attr_accessor :labor_coverage_type_id

    attr_accessor :labor_coverage_length

    attr_accessor :parts_coverage_type_id

    attr_accessor :parts_coverage_length

    attr_accessor :other_coverage_type_id

    attr_accessor :other_coverager_length

    attr_accessor :warrantor_type_id

    attr_accessor :warrantor_id

    attr_accessor :comment

    attr_accessor :asset

    attr_accessor :time_zone

    attr_accessor :work_zone

    attr_accessor :contact_addresses

    attr_accessor :is_manufacturer

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'display_as' => :'DisplayAs',
        :'additional_info' => :'AdditionalInfo',
        :'is_template' => :'IsTemplate',
        :'organization' => :'Organization',
        :'status_id' => :'StatusId',
        :'primary_contact' => :'PrimaryContact',
        :'template_id' => :'TemplateId',
        :'work_order' => :'WorkOrder',
        :'start_date' => :'StartDate',
        :'end_date' => :'EndDate',
        :'auto_coverage' => :'AutoCoverage',
        :'labor_coverage_type_id' => :'LaborCoverageTypeId',
        :'labor_coverage_length' => :'LaborCoverageLength',
        :'parts_coverage_type_id' => :'PartsCoverageTypeId',
        :'parts_coverage_length' => :'PartsCoverageLength',
        :'other_coverage_type_id' => :'OtherCoverageTypeId',
        :'other_coverager_length' => :'OtherCoveragerLength',
        :'warrantor_type_id' => :'WarrantorTypeId',
        :'warrantor_id' => :'WarrantorId',
        :'comment' => :'Comment',
        :'asset' => :'Asset',
        :'time_zone' => :'TimeZone',
        :'work_zone' => :'WorkZone',
        :'contact_addresses' => :'ContactAddresses',
        :'is_manufacturer' => :'IsManufacturer'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'display_as' => :'String',
        :'additional_info' => :'String',
        :'is_template' => :'Boolean',
        :'organization' => :'Organization',
        :'status_id' => :'WarrantyStatus',
        :'primary_contact' => :'String',
        :'template_id' => :'Integer',
        :'work_order' => :'WorkOrder',
        :'start_date' => :'Time',
        :'end_date' => :'Time',
        :'auto_coverage' => :'Integer',
        :'labor_coverage_type_id' => :'SchedInterval',
        :'labor_coverage_length' => :'Integer',
        :'parts_coverage_type_id' => :'SchedInterval',
        :'parts_coverage_length' => :'Integer',
        :'other_coverage_type_id' => :'SchedInterval',
        :'other_coverager_length' => :'Integer',
        :'warrantor_type_id' => :'ActorType',
        :'warrantor_id' => :'Integer',
        :'comment' => :'String',
        :'asset' => :'Location',
        :'time_zone' => :'Integer',
        :'work_zone' => :'WorkZone',
        :'contact_addresses' => :'Array<ContactInfo>',
        :'is_manufacturer' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Corrigo::WarrantyAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Corrigo::WarrantyAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'display_as')
        self.display_as = attributes[:'display_as']
      end

      if attributes.key?(:'additional_info')
        self.additional_info = attributes[:'additional_info']
      end

      if attributes.key?(:'is_template')
        self.is_template = attributes[:'is_template']
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'status_id')
        self.status_id = attributes[:'status_id']
      end

      if attributes.key?(:'primary_contact')
        self.primary_contact = attributes[:'primary_contact']
      end

      if attributes.key?(:'template_id')
        self.template_id = attributes[:'template_id']
      end

      if attributes.key?(:'work_order')
        self.work_order = attributes[:'work_order']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'auto_coverage')
        self.auto_coverage = attributes[:'auto_coverage']
      end

      if attributes.key?(:'labor_coverage_type_id')
        self.labor_coverage_type_id = attributes[:'labor_coverage_type_id']
      end

      if attributes.key?(:'labor_coverage_length')
        self.labor_coverage_length = attributes[:'labor_coverage_length']
      end

      if attributes.key?(:'parts_coverage_type_id')
        self.parts_coverage_type_id = attributes[:'parts_coverage_type_id']
      end

      if attributes.key?(:'parts_coverage_length')
        self.parts_coverage_length = attributes[:'parts_coverage_length']
      end

      if attributes.key?(:'other_coverage_type_id')
        self.other_coverage_type_id = attributes[:'other_coverage_type_id']
      end

      if attributes.key?(:'other_coverager_length')
        self.other_coverager_length = attributes[:'other_coverager_length']
      end

      if attributes.key?(:'warrantor_type_id')
        self.warrantor_type_id = attributes[:'warrantor_type_id']
      end

      if attributes.key?(:'warrantor_id')
        self.warrantor_id = attributes[:'warrantor_id']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'asset')
        self.asset = attributes[:'asset']
      end

      if attributes.key?(:'time_zone')
        self.time_zone = attributes[:'time_zone']
      end

      if attributes.key?(:'work_zone')
        self.work_zone = attributes[:'work_zone']
      end

      if attributes.key?(:'contact_addresses')
        if (value = attributes[:'contact_addresses']).is_a?(Array)
          self.contact_addresses = value
        end
      end

      if attributes.key?(:'is_manufacturer')
        self.is_manufacturer = attributes[:'is_manufacturer']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          display_as == o.display_as &&
          additional_info == o.additional_info &&
          is_template == o.is_template &&
          organization == o.organization &&
          status_id == o.status_id &&
          primary_contact == o.primary_contact &&
          template_id == o.template_id &&
          work_order == o.work_order &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          auto_coverage == o.auto_coverage &&
          labor_coverage_type_id == o.labor_coverage_type_id &&
          labor_coverage_length == o.labor_coverage_length &&
          parts_coverage_type_id == o.parts_coverage_type_id &&
          parts_coverage_length == o.parts_coverage_length &&
          other_coverage_type_id == o.other_coverage_type_id &&
          other_coverager_length == o.other_coverager_length &&
          warrantor_type_id == o.warrantor_type_id &&
          warrantor_id == o.warrantor_id &&
          comment == o.comment &&
          asset == o.asset &&
          time_zone == o.time_zone &&
          work_zone == o.work_zone &&
          contact_addresses == o.contact_addresses &&
          is_manufacturer == o.is_manufacturer
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [display_as, additional_info, is_template, organization, status_id, primary_contact, template_id, work_order, start_date, end_date, auto_coverage, labor_coverage_type_id, labor_coverage_length, parts_coverage_type_id, parts_coverage_length, other_coverage_type_id, other_coverager_length, warrantor_type_id, warrantor_id, comment, asset, time_zone, work_zone, contact_addresses, is_manufacturer].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Corrigo.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
