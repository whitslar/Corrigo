=begin
#Corrigo Api Integration

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Corrigo
  class WoOnSiteAllOf
    attr_accessor :work_order_id

    attr_accessor :employee_id

    attr_accessor :time_zone

    attr_accessor :dt_check_in

    attr_accessor :in_check_type_id

    attr_accessor :in_validation_value

    attr_accessor :in_latitude

    attr_accessor :in_longitude

    attr_accessor :in_inv_item_id

    attr_accessor :in_distance

    attr_accessor :in_status_id

    attr_accessor :dt_check_out

    attr_accessor :out_check_type_id

    attr_accessor :out_validation_value

    attr_accessor :out_latitude

    attr_accessor :out_longitude

    attr_accessor :out_inv_item_id

    attr_accessor :out_distance

    attr_accessor :out_status_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'work_order_id' => :'WorkOrderId',
        :'employee_id' => :'EmployeeId',
        :'time_zone' => :'TimeZone',
        :'dt_check_in' => :'DtCheckIn',
        :'in_check_type_id' => :'InCheckTypeId',
        :'in_validation_value' => :'InValidationValue',
        :'in_latitude' => :'InLatitude',
        :'in_longitude' => :'InLongitude',
        :'in_inv_item_id' => :'InInvItemId',
        :'in_distance' => :'InDistance',
        :'in_status_id' => :'InStatusId',
        :'dt_check_out' => :'DtCheckOut',
        :'out_check_type_id' => :'OutCheckTypeId',
        :'out_validation_value' => :'OutValidationValue',
        :'out_latitude' => :'OutLatitude',
        :'out_longitude' => :'OutLongitude',
        :'out_inv_item_id' => :'OutInvItemId',
        :'out_distance' => :'OutDistance',
        :'out_status_id' => :'OutStatusId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'work_order_id' => :'Integer',
        :'employee_id' => :'Integer',
        :'time_zone' => :'Integer',
        :'dt_check_in' => :'Time',
        :'in_check_type_id' => :'OnSiteValidationType',
        :'in_validation_value' => :'String',
        :'in_latitude' => :'Float',
        :'in_longitude' => :'Float',
        :'in_inv_item_id' => :'Integer',
        :'in_distance' => :'Float',
        :'in_status_id' => :'OnSiteValidationResult',
        :'dt_check_out' => :'Time',
        :'out_check_type_id' => :'OnSiteValidationType',
        :'out_validation_value' => :'String',
        :'out_latitude' => :'Float',
        :'out_longitude' => :'Float',
        :'out_inv_item_id' => :'Integer',
        :'out_distance' => :'Float',
        :'out_status_id' => :'OnSiteValidationResult'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Corrigo::WoOnSiteAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Corrigo::WoOnSiteAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'work_order_id')
        self.work_order_id = attributes[:'work_order_id']
      end

      if attributes.key?(:'employee_id')
        self.employee_id = attributes[:'employee_id']
      end

      if attributes.key?(:'time_zone')
        self.time_zone = attributes[:'time_zone']
      end

      if attributes.key?(:'dt_check_in')
        self.dt_check_in = attributes[:'dt_check_in']
      end

      if attributes.key?(:'in_check_type_id')
        self.in_check_type_id = attributes[:'in_check_type_id']
      end

      if attributes.key?(:'in_validation_value')
        self.in_validation_value = attributes[:'in_validation_value']
      end

      if attributes.key?(:'in_latitude')
        self.in_latitude = attributes[:'in_latitude']
      end

      if attributes.key?(:'in_longitude')
        self.in_longitude = attributes[:'in_longitude']
      end

      if attributes.key?(:'in_inv_item_id')
        self.in_inv_item_id = attributes[:'in_inv_item_id']
      end

      if attributes.key?(:'in_distance')
        self.in_distance = attributes[:'in_distance']
      end

      if attributes.key?(:'in_status_id')
        self.in_status_id = attributes[:'in_status_id']
      end

      if attributes.key?(:'dt_check_out')
        self.dt_check_out = attributes[:'dt_check_out']
      end

      if attributes.key?(:'out_check_type_id')
        self.out_check_type_id = attributes[:'out_check_type_id']
      end

      if attributes.key?(:'out_validation_value')
        self.out_validation_value = attributes[:'out_validation_value']
      end

      if attributes.key?(:'out_latitude')
        self.out_latitude = attributes[:'out_latitude']
      end

      if attributes.key?(:'out_longitude')
        self.out_longitude = attributes[:'out_longitude']
      end

      if attributes.key?(:'out_inv_item_id')
        self.out_inv_item_id = attributes[:'out_inv_item_id']
      end

      if attributes.key?(:'out_distance')
        self.out_distance = attributes[:'out_distance']
      end

      if attributes.key?(:'out_status_id')
        self.out_status_id = attributes[:'out_status_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          work_order_id == o.work_order_id &&
          employee_id == o.employee_id &&
          time_zone == o.time_zone &&
          dt_check_in == o.dt_check_in &&
          in_check_type_id == o.in_check_type_id &&
          in_validation_value == o.in_validation_value &&
          in_latitude == o.in_latitude &&
          in_longitude == o.in_longitude &&
          in_inv_item_id == o.in_inv_item_id &&
          in_distance == o.in_distance &&
          in_status_id == o.in_status_id &&
          dt_check_out == o.dt_check_out &&
          out_check_type_id == o.out_check_type_id &&
          out_validation_value == o.out_validation_value &&
          out_latitude == o.out_latitude &&
          out_longitude == o.out_longitude &&
          out_inv_item_id == o.out_inv_item_id &&
          out_distance == o.out_distance &&
          out_status_id == o.out_status_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [work_order_id, employee_id, time_zone, dt_check_in, in_check_type_id, in_validation_value, in_latitude, in_longitude, in_inv_item_id, in_distance, in_status_id, dt_check_out, out_check_type_id, out_validation_value, out_latitude, out_longitude, out_inv_item_id, out_distance, out_status_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Corrigo.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
