=begin
#Corrigo Api Integration

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Corrigo
  class WoProcedureStepAllOf
    attr_accessor :work_order_id

    attr_accessor :index

    attr_accessor :comment

    attr_accessor :description

    attr_accessor :status_id

    attr_accessor :wo_procedure_id

    attr_accessor :procedure_template_step

    attr_accessor :type_id

    attr_accessor :is_won

    attr_accessor :is_required

    attr_accessor :field_descriptor

    attr_accessor :attr_descriptor

    attr_accessor :data_type_id

    attr_accessor :data_value

    attr_accessor :data_label

    attr_accessor :flag

    attr_accessor :is_not_applicable

    attr_accessor :money_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'work_order_id' => :'WorkOrderId',
        :'index' => :'Index',
        :'comment' => :'Comment',
        :'description' => :'Description',
        :'status_id' => :'StatusId',
        :'wo_procedure_id' => :'WoProcedureId',
        :'procedure_template_step' => :'ProcedureTemplateStep',
        :'type_id' => :'TypeId',
        :'is_won' => :'IsWon',
        :'is_required' => :'IsRequired',
        :'field_descriptor' => :'FieldDescriptor',
        :'attr_descriptor' => :'AttrDescriptor',
        :'data_type_id' => :'DataTypeId',
        :'data_value' => :'DataValue',
        :'data_label' => :'DataLabel',
        :'flag' => :'Flag',
        :'is_not_applicable' => :'IsNotApplicable',
        :'money_id' => :'MoneyId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'work_order_id' => :'Integer',
        :'index' => :'Integer',
        :'comment' => :'String',
        :'description' => :'String',
        :'status_id' => :'ProcedureStatus',
        :'wo_procedure_id' => :'Integer',
        :'procedure_template_step' => :'ProcedureTemplateStep',
        :'type_id' => :'ProcedureStepType',
        :'is_won' => :'Boolean',
        :'is_required' => :'Boolean',
        :'field_descriptor' => :'CustomFieldDescriptor',
        :'attr_descriptor' => :'AttributeDescriptor',
        :'data_type_id' => :'CfType',
        :'data_value' => :'String',
        :'data_label' => :'String',
        :'flag' => :'ProcedureFlagReason',
        :'is_not_applicable' => :'Boolean',
        :'money_id' => :'CurrencyType'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Corrigo::WoProcedureStepAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Corrigo::WoProcedureStepAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'work_order_id')
        self.work_order_id = attributes[:'work_order_id']
      end

      if attributes.key?(:'index')
        self.index = attributes[:'index']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'status_id')
        self.status_id = attributes[:'status_id']
      end

      if attributes.key?(:'wo_procedure_id')
        self.wo_procedure_id = attributes[:'wo_procedure_id']
      end

      if attributes.key?(:'procedure_template_step')
        self.procedure_template_step = attributes[:'procedure_template_step']
      end

      if attributes.key?(:'type_id')
        self.type_id = attributes[:'type_id']
      end

      if attributes.key?(:'is_won')
        self.is_won = attributes[:'is_won']
      end

      if attributes.key?(:'is_required')
        self.is_required = attributes[:'is_required']
      end

      if attributes.key?(:'field_descriptor')
        self.field_descriptor = attributes[:'field_descriptor']
      end

      if attributes.key?(:'attr_descriptor')
        self.attr_descriptor = attributes[:'attr_descriptor']
      end

      if attributes.key?(:'data_type_id')
        self.data_type_id = attributes[:'data_type_id']
      end

      if attributes.key?(:'data_value')
        self.data_value = attributes[:'data_value']
      end

      if attributes.key?(:'data_label')
        self.data_label = attributes[:'data_label']
      end

      if attributes.key?(:'flag')
        self.flag = attributes[:'flag']
      end

      if attributes.key?(:'is_not_applicable')
        self.is_not_applicable = attributes[:'is_not_applicable']
      end

      if attributes.key?(:'money_id')
        self.money_id = attributes[:'money_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          work_order_id == o.work_order_id &&
          index == o.index &&
          comment == o.comment &&
          description == o.description &&
          status_id == o.status_id &&
          wo_procedure_id == o.wo_procedure_id &&
          procedure_template_step == o.procedure_template_step &&
          type_id == o.type_id &&
          is_won == o.is_won &&
          is_required == o.is_required &&
          field_descriptor == o.field_descriptor &&
          attr_descriptor == o.attr_descriptor &&
          data_type_id == o.data_type_id &&
          data_value == o.data_value &&
          data_label == o.data_label &&
          flag == o.flag &&
          is_not_applicable == o.is_not_applicable &&
          money_id == o.money_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [work_order_id, index, comment, description, status_id, wo_procedure_id, procedure_template_step, type_id, is_won, is_required, field_descriptor, attr_descriptor, data_type_id, data_value, data_label, flag, is_not_applicable, money_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Corrigo.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
