=begin
#Corrigo Api Integration

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Corrigo
  class WorkOrderCostAllOf
    attr_accessor :currency_type_id

    attr_accessor :bill_to_option

    attr_accessor :costs_total

    attr_accessor :ap_state_id

    attr_accessor :ap_status_id

    attr_accessor :job_code

    attr_accessor :contract

    attr_accessor :authorization_code

    attr_accessor :check_number

    attr_accessor :payment_amount

    attr_accessor :payment_notes

    attr_accessor :check_cut_date

    attr_accessor :check_clear_date

    attr_accessor :gl_account

    attr_accessor :number

    attr_accessor :vendor_invoice_date

    attr_accessor :vendor_invoice_received_date

    attr_accessor :vendor_invoice_total

    attr_accessor :is_pre_billed

    attr_accessor :expenses_total

    attr_accessor :billing_rule

    attr_accessor :tax_status

    attr_accessor :customer_nte

    attr_accessor :items

    attr_accessor :tax_validation_note

    attr_accessor :tax_details

    attr_accessor :service_fees_total

    attr_accessor :cost_status_id

    attr_accessor :cost_state

    attr_accessor :charge_code

    attr_accessor :billing_account

    attr_accessor :external_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'currency_type_id' => :'CurrencyTypeId',
        :'bill_to_option' => :'BillToOption',
        :'costs_total' => :'CostsTotal',
        :'ap_state_id' => :'ApStateId',
        :'ap_status_id' => :'ApStatusId',
        :'job_code' => :'JobCode',
        :'contract' => :'Contract',
        :'authorization_code' => :'AuthorizationCode',
        :'check_number' => :'CheckNumber',
        :'payment_amount' => :'PaymentAmount',
        :'payment_notes' => :'PaymentNotes',
        :'check_cut_date' => :'CheckCutDate',
        :'check_clear_date' => :'CheckClearDate',
        :'gl_account' => :'GlAccount',
        :'number' => :'Number',
        :'vendor_invoice_date' => :'VendorInvoiceDate',
        :'vendor_invoice_received_date' => :'VendorInvoiceReceivedDate',
        :'vendor_invoice_total' => :'VendorInvoiceTotal',
        :'is_pre_billed' => :'IsPreBilled',
        :'expenses_total' => :'ExpensesTotal',
        :'billing_rule' => :'BillingRule',
        :'tax_status' => :'TaxStatus',
        :'customer_nte' => :'CustomerNte',
        :'items' => :'Items',
        :'tax_validation_note' => :'TaxValidationNote',
        :'tax_details' => :'TaxDetails',
        :'service_fees_total' => :'ServiceFeesTotal',
        :'cost_status_id' => :'CostStatusId',
        :'cost_state' => :'CostState',
        :'charge_code' => :'ChargeCode',
        :'billing_account' => :'BillingAccount',
        :'external_id' => :'ExternalId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'currency_type_id' => :'CurrencyType',
        :'bill_to_option' => :'BillToOption',
        :'costs_total' => :'MoneyValue',
        :'ap_state_id' => :'ApState',
        :'ap_status_id' => :'Integer',
        :'job_code' => :'String',
        :'contract' => :'Contract',
        :'authorization_code' => :'String',
        :'check_number' => :'String',
        :'payment_amount' => :'MoneyValue',
        :'payment_notes' => :'String',
        :'check_cut_date' => :'Time',
        :'check_clear_date' => :'Time',
        :'gl_account' => :'String',
        :'number' => :'String',
        :'vendor_invoice_date' => :'Time',
        :'vendor_invoice_received_date' => :'Time',
        :'vendor_invoice_total' => :'MoneyValue',
        :'is_pre_billed' => :'Boolean',
        :'expenses_total' => :'MoneyValue',
        :'billing_rule' => :'BillingRule',
        :'tax_status' => :'TaxValidationStatus',
        :'customer_nte' => :'MoneyValue',
        :'items' => :'Array<FinancialItem>',
        :'tax_validation_note' => :'Blob',
        :'tax_details' => :'Array<TaxDetail>',
        :'service_fees_total' => :'MoneyValue',
        :'cost_status_id' => :'Integer',
        :'cost_state' => :'CostState',
        :'charge_code' => :'ChargeCodeLookup',
        :'billing_account' => :'BillingAccount',
        :'external_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Corrigo::WorkOrderCostAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Corrigo::WorkOrderCostAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'currency_type_id')
        self.currency_type_id = attributes[:'currency_type_id']
      end

      if attributes.key?(:'bill_to_option')
        self.bill_to_option = attributes[:'bill_to_option']
      end

      if attributes.key?(:'costs_total')
        self.costs_total = attributes[:'costs_total']
      end

      if attributes.key?(:'ap_state_id')
        self.ap_state_id = attributes[:'ap_state_id']
      end

      if attributes.key?(:'ap_status_id')
        self.ap_status_id = attributes[:'ap_status_id']
      end

      if attributes.key?(:'job_code')
        self.job_code = attributes[:'job_code']
      end

      if attributes.key?(:'contract')
        self.contract = attributes[:'contract']
      end

      if attributes.key?(:'authorization_code')
        self.authorization_code = attributes[:'authorization_code']
      end

      if attributes.key?(:'check_number')
        self.check_number = attributes[:'check_number']
      end

      if attributes.key?(:'payment_amount')
        self.payment_amount = attributes[:'payment_amount']
      end

      if attributes.key?(:'payment_notes')
        self.payment_notes = attributes[:'payment_notes']
      end

      if attributes.key?(:'check_cut_date')
        self.check_cut_date = attributes[:'check_cut_date']
      end

      if attributes.key?(:'check_clear_date')
        self.check_clear_date = attributes[:'check_clear_date']
      end

      if attributes.key?(:'gl_account')
        self.gl_account = attributes[:'gl_account']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'vendor_invoice_date')
        self.vendor_invoice_date = attributes[:'vendor_invoice_date']
      end

      if attributes.key?(:'vendor_invoice_received_date')
        self.vendor_invoice_received_date = attributes[:'vendor_invoice_received_date']
      end

      if attributes.key?(:'vendor_invoice_total')
        self.vendor_invoice_total = attributes[:'vendor_invoice_total']
      end

      if attributes.key?(:'is_pre_billed')
        self.is_pre_billed = attributes[:'is_pre_billed']
      end

      if attributes.key?(:'expenses_total')
        self.expenses_total = attributes[:'expenses_total']
      end

      if attributes.key?(:'billing_rule')
        self.billing_rule = attributes[:'billing_rule']
      end

      if attributes.key?(:'tax_status')
        self.tax_status = attributes[:'tax_status']
      end

      if attributes.key?(:'customer_nte')
        self.customer_nte = attributes[:'customer_nte']
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.key?(:'tax_validation_note')
        self.tax_validation_note = attributes[:'tax_validation_note']
      end

      if attributes.key?(:'tax_details')
        if (value = attributes[:'tax_details']).is_a?(Array)
          self.tax_details = value
        end
      end

      if attributes.key?(:'service_fees_total')
        self.service_fees_total = attributes[:'service_fees_total']
      end

      if attributes.key?(:'cost_status_id')
        self.cost_status_id = attributes[:'cost_status_id']
      end

      if attributes.key?(:'cost_state')
        self.cost_state = attributes[:'cost_state']
      end

      if attributes.key?(:'charge_code')
        self.charge_code = attributes[:'charge_code']
      end

      if attributes.key?(:'billing_account')
        self.billing_account = attributes[:'billing_account']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          currency_type_id == o.currency_type_id &&
          bill_to_option == o.bill_to_option &&
          costs_total == o.costs_total &&
          ap_state_id == o.ap_state_id &&
          ap_status_id == o.ap_status_id &&
          job_code == o.job_code &&
          contract == o.contract &&
          authorization_code == o.authorization_code &&
          check_number == o.check_number &&
          payment_amount == o.payment_amount &&
          payment_notes == o.payment_notes &&
          check_cut_date == o.check_cut_date &&
          check_clear_date == o.check_clear_date &&
          gl_account == o.gl_account &&
          number == o.number &&
          vendor_invoice_date == o.vendor_invoice_date &&
          vendor_invoice_received_date == o.vendor_invoice_received_date &&
          vendor_invoice_total == o.vendor_invoice_total &&
          is_pre_billed == o.is_pre_billed &&
          expenses_total == o.expenses_total &&
          billing_rule == o.billing_rule &&
          tax_status == o.tax_status &&
          customer_nte == o.customer_nte &&
          items == o.items &&
          tax_validation_note == o.tax_validation_note &&
          tax_details == o.tax_details &&
          service_fees_total == o.service_fees_total &&
          cost_status_id == o.cost_status_id &&
          cost_state == o.cost_state &&
          charge_code == o.charge_code &&
          billing_account == o.billing_account &&
          external_id == o.external_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [currency_type_id, bill_to_option, costs_total, ap_state_id, ap_status_id, job_code, contract, authorization_code, check_number, payment_amount, payment_notes, check_cut_date, check_clear_date, gl_account, number, vendor_invoice_date, vendor_invoice_received_date, vendor_invoice_total, is_pre_billed, expenses_total, billing_rule, tax_status, customer_nte, items, tax_validation_note, tax_details, service_fees_total, cost_status_id, cost_state, charge_code, billing_account, external_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Corrigo.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
