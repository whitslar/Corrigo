=begin
#Corrigo Api Integration

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Corrigo::BaseApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BaseApi' do
  before do
    # run before each test
    @api_instance = Corrigo::BaseApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BaseApi' do
    it 'should create an instance of BaseApi' do
      expect(@api_instance).to be_instance_of(Corrigo::BaseApi)
    end
  end

  # unit tests for base_create
  # Create record for entity type with filled coresponding entity
  # @param entity_name Entity type of creating record
  # @param api_version 
  # @param authorization Bearer token
  # @param company_name Company friendly name
  # @param body Change request model with coresponding Corrigo Entity data
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'base_create test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for base_delete
  # Delete record of entity type and Id
  # @param entity_name Entity type of record for deleting
  # @param inline_id Id of simple entity
  # @param api_version 
  # @param authorization Bearer token
  # @param company_name Company friendly name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id Id or JSON object with identifier fields of retrieve data
  # @option opts [String] :request_id The unique identifier of the request
  # @return [Object]
  describe 'base_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for base_get
  # Get record by entity type and identifier
  # @param entity_name Entity type of retrieve data
  # @param inline_id Id of simple entity
  # @param api_version 
  # @param authorization Bearer token
  # @param company_name Company friendly name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id Id or JSON object with identifier fields of retrieve data
  # @option opts [String] :properties List of property names to query combined by \&quot;,\&quot;
  # @option opts [String] :request_id The unique identifier of the request
  # @return [Object]
  describe 'base_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for base_update
  # Update record for entity type by filled coresponding properties
  # @param entity_name Entity type of updated record
  # @param api_version 
  # @param authorization Bearer token
  # @param company_name Company friendly name
  # @param body Change request model with property set and entity fields
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'base_update test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
